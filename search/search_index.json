{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Boluwatife Adeshina's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting Up a Dev Container for Rust","text":"<ul> <li>Primary author: Boluwatife Adeshina</li> <li>Reviewer: Miguel Alvarado Dorado</li> </ul>"},{"location":"tutorials/rust-setup/#introduction","title":"Introduction","text":"<p>In this tutorial, you'll learn how to set up a development environment for Rust using a DevContainer. DevContainers allow you to define a consistent, containerized development environment that works seamlessly with Visual Studio Code. Whether you're new to Rust or looking to streamline your workflow, this guide will walk you through creating a new DevContainer project, writing a simple \"Hello COMP423\" program, and running it successfully. By the end, you'll have a fully functional setup and a clear understanding of the tools involved. Let's get started!</p> <p>Warning</p> <p>Do not install Rust or Cargo directly on your computer. The Dev Container handles everything for you, ensuring a consistent and isolated environment. Additionally, the Dev Container runs on Linux, so if you see an .exe file, that may mean that you are running commands outside the Dev Container on your host machine.</p> <p>Follow these steps to create and configure a Rust DevContainer for your project.</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Tools Required:<ul> <li>Docker</li> <li>Visual Studio Code</li> <li>VSCode Extensions:<ul> <li>Dev Containers</li> </ul> </li> </ul> </li> </ul>"},{"location":"tutorials/rust-setup/#steps-to-create-a-rust-dev-container","title":"Steps to Create a Rust Dev Container","text":""},{"location":"tutorials/rust-setup/#1-create-a-new-project-directory","title":"1. Create a New Project Directory","text":"<p>Start by creating a new folder for your project by running these commands in the terminal: <pre><code>mkdir rust-devcontainer\ncd rust-devcontainer\ngit init\n</code></pre> and opening the resulting folder in Visual Studio Code.</p>"},{"location":"tutorials/rust-setup/#2-add-dev-container-configuration","title":"2. Add Dev Container Configuration","text":"<p>Inside the <code>rust-devcontainer</code>, create a new directory named <code>.devcontainer</code>: <pre><code>mkdir .devcontainer\n</code></pre> Then create the file with pathway <code>.devcontainer/devcontainer.json</code> by writing to your terminal: <pre><code>touch .devcontainer/devcontainer.json     #if on a Linux based system\necho {} &gt; .devcontainer\\devcontainer.json     #if on a Windows based system\n</code></pre> Add the following content to our JSON File: <pre><code>{\n  \"name\": \"Rust DevContainer\",        \n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\", \n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  } \n}\n</code></pre> This instructs VSCode to download the Rust Analyzer extension (identifier: <code>rust-lang.rust-analyzer</code> upon opening a Dev Container. <code>name</code> is the name of the DevContainer, <code>image</code> is the link to the Docker image we will use, and <code>customizations</code> is useful for adding important extensions.</p>"},{"location":"tutorials/rust-setup/#3-opening-the-devcontainer","title":"3. Opening the DevContainer","text":"<p>Reopen the project in the container by pressing <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option.</p> <p>Verify that Rust has been installed by opening a terminal and running the command:  <pre><code>rustc --version\n</code></pre> This command should return: <code>rustc 1.83.0 (90b35a623 2024-11-26)</code></p>"},{"location":"tutorials/rust-setup/#4-executing-a-rust-program","title":"4. Executing a Rust Program","text":"<p>To ensure functionality, lets create a basic Rust program.</p> <ol> <li> <p>Create a new Rust project and enter it by writing the following to the command line: <pre><code>cargo new hello-comp423 --vcs none      #The --vcs option ensures that we create a new project without automatically creating a new git repository\ncd hello-comp423\n</code></pre></p> </li> <li> <p>Open <code>src/main.rs</code> and write over its contents with this function:     <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre>     and save the file.</p> </li> <li> <p>There are two ways we can run the file:</p> <code>cargo build</code> <p>The first way utilizes <code>cargo build</code>. This command creates an ELF (Executable and Linked File) within a new <code>target</code> directory which allows you to manually run the program from your terminal. You run the program by running the command <code>./target/debug/&lt;your-program-name&gt;</code> in your terminal. (<code>./</code> tells the terminal to look for an executable in the current directory while the rest specifies the pathname of the ELF file) In this instance we would run <code>./target/debug/hello-comp423</code>. Once this is completed your program should output: <pre><code>Hello COMP423\n</code></pre> <code>cargo build</code> is useful because it compiles and builds your Rust project, downloads and manages all dependencies, and allows you to run it at any time of your choosing. Ultimately this gives you a lot of control over your program.</p> <p>Tip</p> <p><code>cargo clean</code> will remove the <code>target</code> directory, deleting all build artifacts. You can run this command to free up disk space, ensure a fresh build, or fix build issues.</p> <code>cargo run</code> <p>The second way, <code>cargo run</code> builds and executes your program in a single action. Whereas if you alter your process, you would have to rerun <code>cargo build</code>, <code>cargo run</code> automatically rebuilds your project if your make changes everytime you execute it. Again, your project build remains in the <code>target</code> directory, and consists of compiled binaries (The ELF files) and dependencies.</p> <p>Note</p> <p>Note that <code>cargo build</code> allows you to build your project once and then run it multiple times. It can be useful for performance-sensitive tasks as it allows you to inspect or manipulate the compiled output. <code>cargo run</code> streamlines the process by automatically handling both tasks, which is more convenient for regular development.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#key-concepts-for-setting-up-a-devcontainer-project","title":"Key Concepts for Setting Up a DevContainer Project","text":"DevContainer A configuration for containerized development environments in Visual Studio Code. It includes tools, dependencies, and settings. Docker A platform that enables you to develop, ship, and run applications inside containers. Required for using DevContainers. <code>devcontainer.json</code> A configuration file that defines the settings, extensions, and commands for the DevContainer. Rust DevContainer A pre-configured DevContainer for Rust development. Includes Rust tools like <code>cargo</code> and the Rust Analyzer extension."},{"location":"tutorials/rust-setup/#references","title":"References","text":"<ol> <li>Starting a Static Website Project with MkDocs</li> </ol>"}]}